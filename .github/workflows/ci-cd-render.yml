name: CI/CD - Render Deployment

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_ENV: production

jobs:
  # CI Job: Build and test the application
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Build project
        run: npm run build
        env:
          VITE_TMDB_API_KEY: ${{ secrets.VITE_TMDB_API_KEY }}
          VITE_TMDB_BASE_URL: https://api.themoviedb.org/3
          VITE_APP_NAME: Cineverse
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_APP_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_ENABLE_ANALYTICS: ${{ github.event.inputs.environment == 'production' && 'true' || 'false' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # CD Job: Deploy to Render (only on main/master branch pushes)
  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build
        env:
          VITE_TMDB_API_KEY: ${{ secrets.VITE_TMDB_API_KEY }}
          VITE_TMDB_BASE_URL: https://api.themoviedb.org/3
          VITE_APP_NAME: Cineverse
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_APP_ENVIRONMENT: production
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_ENABLE_ANALYTICS: true

      - name: Deploy to Render
        id: deploy
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ steps.deploy.outcome }}" == "success" ]; then
            echo "‚úÖ Deployment to Render successful!"
            echo "üöÄ Application deployed to: ${{ steps.deploy.outputs.url || 'Render dashboard' }}"
          else
            echo "‚ùå Deployment to Render failed!"
            exit 1
          fi

  # Optional: Deploy on workflow dispatch
  manual-deploy:
    name: Manual Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'workflow_dispatch'

    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: npm run build
        env:
          VITE_TMDB_API_KEY: ${{ secrets.VITE_TMDB_API_KEY }}
          VITE_TMDB_BASE_URL: https://api.themoviedb.org/3
          VITE_APP_NAME: Cineverse
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_APP_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_ENABLE_ANALYTICS: ${{ github.event.inputs.environment == 'production' && 'true' || 'false' }}

      - name: Deploy to Render
        id: deploy
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ steps.deploy.outcome }}" == "success" ]; then
            echo "‚úÖ Manual deployment to Render successful!"
            echo "üöÄ Application deployed to: ${{ steps.deploy.outputs.url || 'Render dashboard' }}"
          else
            echo "‚ùå Manual deployment to Render failed!"
            exit 1
          fi
